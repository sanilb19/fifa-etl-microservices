services:
  postgres:
    image: postgres:15
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=fifa_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  extract:
    build:
      context: .
      dockerfile: docker/Dockerfile
    volumes:
      - ./data:/app/data
      - ${HOME}/.kaggle:/root/.kaggle:ro  # Read-only mount of Kaggle credentials
    environment:
      - PYTHONPATH=/app
      - DATA_SOURCE=${DATA_SOURCE:-kaggle}  # Default to kaggle if not set
      - KAGGLE_USERNAME=${KAGGLE_USERNAME:-}  # Optional Kaggle credentials
      - KAGGLE_KEY=${KAGGLE_KEY:-}  # Optional Kaggle credentials
    command: >
      bash -c '
        echo "Checking Kaggle credentials..."
        if [ -f /root/.kaggle/kaggle.json ]; then
          echo "Found kaggle.json"
          ls -l /root/.kaggle/kaggle.json
        else
          echo "No kaggle.json found"
        fi
        if [ "$DATA_SOURCE" = "kaggle" ] && [ ! -f /root/.kaggle/kaggle.json ] && [ -z "$KAGGLE_USERNAME" ] && [ -z "$KAGGLE_KEY" ]; then
          echo "Error: Kaggle credentials not found. Please either:"
          echo "1. Place kaggle.json in ~/.kaggle/ directory, or"
          echo "2. Set KAGGLE_USERNAME and KAGGLE_KEY environment variables, or"
          echo "3. Use DATA_SOURCE=archive to use local data"
          exit 1
        fi
        python -m services.extract.main
        # Keep container running after completion
        tail -f /dev/null
      '
    healthcheck:
      test: ["CMD-SHELL", "ls /app/data/raw/*.csv >/dev/null 2>&1"]
      interval: 5s
      timeout: 5s
      retries: 5

  transform:
    build:
      context: .
      dockerfile: docker/Dockerfile
    volumes:
      - ./data:/app/data
    environment:
      - PYTHONPATH=/app
    command: >
      bash -c '
        python -m services.transform.main
        # Keep container running after completion
        tail -f /dev/null
      '
    depends_on:
      extract:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "ls /app/data/processed/*.parquet >/dev/null 2>&1"]
      interval: 5s
      timeout: 5s
      retries: 5

  load:
    build:
      context: .
      dockerfile: docker/Dockerfile
    volumes:
      - ./data:/app/data
    environment:
      - PYTHONPATH=/app
    command: >
      bash -c '
        python -m services.load.main
        # Keep container running after completion
        tail -f /dev/null
      '
    depends_on:
      transform:
        condition: service_healthy
      postgres:
        condition: service_healthy

volumes:
  postgres_data: